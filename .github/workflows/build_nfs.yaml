---
name: Build NFS Server

on:
  workflow_dispatch: {}

env:
  DOCKER_TAG: 'nfs:${{ github.sha }}'

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        platform: [amd64, arm64]
    env:
      PLATFORM: '${{ matrix.platform }}'
      DOCKER_TAR: 'nfs_${{ github.sha }}_${{ matrix.platform }}.tar'
    outputs:
      amd64: '${{ steps.save_output.outputs.amd64 }}'
      arm64: '${{ steps.save_output.outputs.arm64 }}'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: docker/setup-qemu-action@v3
        if: "${{ matrix.platform != 'amd64'}}"
        with:
          platforms: '${{ matrix.platform }}'
      - name: Build Docker Container
        run: |
          docker build --platform "linux/${PLATFORM}" --tag "${DOCKER_TAG}-${PLATFORM}" -f nfs/Containerfile nfs
      - name: Export Docker Container
        run: |
          docker save -o "${DOCKER_TAR}" "${DOCKER_TAG}-${PLATFORM}"
      - uses: actions/upload-artifact@v4
        with:
          name: '${{ env.DOCKER_TAR }}'
          path: '${{ env.DOCKER_TAR }}'
      - name: Save Build Output
        id: save_output
        run: |
          printf '%s=%s@%s\n' "${PLATFORM}" "${DOCKER_TAR}" "${DOCKER_TAG}-${PLATFORM}" >> $GITHUB_OUTPUT

  docker-acceptance:
    needs: build
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        platform: [amd64, arm64]
    env:
      PLATFORM: '${{ matrix.platform }}'
      DOCKER_PLATFORM: 'linux/${{ matrix.platform }}'
      DOCKER_TAR: 'nfs_${{ github.sha }}_${{ matrix.platform }}.tar'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: docker/setup-qemu-action@v3
        if: "${{ matrix.platform != 'amd64'}}"
        with:
          platforms: '${{ matrix.platform }}'
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - uses: actions/download-artifact@v4
        with:
          name: '${{ env.DOCKER_TAR }}'
          path: '.'
      - name: Import Docker images
        run: |
          docker load -i "${DOCKER_TAR}"
          docker image ls
      - name: Set Up Test Containers
        working-directory: nfs/spec/fixtures/docker
        run: |
          env DOCKER_TAG="${DOCKER_TAG}-${PLATFORM}" docker compose up -d
      - name: Run Acceptance Tests
        run: bundle exec rspec -I nfs/spec/ -fd nfs/spec/acceptance/docker/*.rb

  kubernetes-acceptance:
    needs: build
    runs-on: ubuntu-24.04
    env:
      DOCKER_TAR: 'nfs_${{ github.sha }}_amd64.tar'
      GIT_SHA: '${{ github.sha }}'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - uses: actions/download-artifact@v4
        with:
          name: '${{ env.DOCKER_TAR }}'
          path: '.'
      - name: Install k3d
        run: |
          curl -sSL https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      - name: Setup k3d cluster
        run: |
          k3d cluster create test --wait
          kubectl rollout status deployment/coredns -n kube-system --timeout 1m
          k3d image import -c test "${DOCKER_TAR}"
      - name: Setup test k8s resources
        run: |
          cat <<EOF >nfs/spec/fixtures/kubernetes/kustomization.yaml
          resources:
           - '01-csi-driver-nfs.yaml'
           - '02-nfs-server.yaml'
           - '03-nfs-client.yaml'
          images:
            - name: ghcr.io/sharpie/nfs:latest
              newName: nfs
              newTag: ${GIT_SHA}-amd64
          EOF

          # Echo resources to stdout for debugging.
          kubectl kustomize nfs/spec/fixtures/kubernetes

          kubectl apply -k nfs/spec/fixtures/kubernetes --wait=true
          kubectl rollout status deployment/nfs-client -n test --timeout 1m
      - name: Run Acceptance Tests
        run: bundle exec rspec -I nfs/spec/ -fd nfs/spec/acceptance/kubernetes/*.rb

  ship:
    runs-on: ubuntu-24.04
    needs: 
      - build
      - docker-acceptance
      - kubernetes-acceptance
    env:
      BUILD_OUTPUT: '${{ toJSON(needs.build.outputs) }}'
    services:
      registry:
        image: 'registry:2'
        ports:
          - '5000:5000'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: regclient/actions/regctl-installer@main
      - name: Login to GitHub Container Registry
        uses: regclient/actions/regctl-login@main
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Import Docker Images
        run: |
          declare -a TAGS
          items=$(jq -r '.[]|values' <<<"${BUILD_OUTPUT}")

          while IFS='@' read file tag; do
            local_tag="localhost:5000/${tag}"

            docker load -i "${file}"
            docker tag "${tag}" "${local_tag}"
            docker push "${local_tag}"

            TAGS+=("${local_tag}")
          done <<<"${items}"

          docker manifest create --insecure "localhost:5000/${DOCKER_TAG}" "${TAGS[@]}"
          docker manifest push "localhost:5000/${DOCKER_TAG}"
      - name: Shipit
        run: |
          regctl registry set localhost:5000 --tls disabled

          regctl image copy "localhost:5000/${DOCKER_TAG}" "ghcr.io/sharpie/${DOCKER_TAG}"
          regctl image copy "localhost:5000/${DOCKER_TAG}" "ghcr.io/sharpie/nfs:latest"

